{"mappings":"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","sources":["src/index.ts","src/config.ts"],"sourcesContent":["import emojiRegex from 'emoji-regex';\nimport type { Content, ElementContent, Root, RootContent } from 'hast';\nimport replaceToArray from 'string-replace-to-array';\nimport twemoji from 'twemoji';\nimport type { Plugin, Transformer } from 'unified';\nimport { map } from 'unist-util-map';\nimport {\n  FrameworkNextOptions,\n  Options,\n  resolveOptions,\n  TwemojiOptions,\n  UserOptions\n} from './config';\n\nconst regex = emojiRegex();\n\nfunction sizeToExtension(size: TwemojiOptions['size']): string {\n  switch (size) {\n    case '72x72':\n      return '.png';\n    case 'svg':\n      return '.svg';\n    default:\n      throw new Error('Unknown size');\n  }\n}\n\n/**\n * @summary Turn parameters object in a URL search params string.\n */\nfunction formatParams(params: FrameworkNextOptions['params']): string {\n  const urlParams = new URLSearchParams();\n  Object.entries(params).forEach(([key, value]) => urlParams.append(key, value.toString()));\n  return urlParams.toString();\n}\n\nconst UFE0Fg = /\\uFE0F/g;\nconst U200D = String.fromCharCode(0x200d);\n\n/**\n * Convert a raw emoji into the relevant Twemoji code point.\n * @param emoji A string containing a single emoji.\n * @returns The code point at which the corresponding emoji can be found in Twemoji.\n * @example The input `'üë®‚Äçüåæ'` would be converted to `'1f468-200d-1f33e'`\n */\nfunction toCodePoint(emoji: string): string {\n  return twemoji.convert.toCodePoint(emoji.indexOf(U200D) < 0 ? emoji.replace(UFE0Fg, '') : emoji);\n}\n\nfunction toBaseUrl(codePoint: string, options: TwemojiOptions): string {\n  return `${options.baseUrl}/${options.size}/${codePoint}${sizeToExtension(options.size)}`;\n}\n\nfunction toNextUrl(\n  emoji: string,\n  nextOptions: FrameworkNextOptions,\n  options: TwemojiOptions\n): string {\n  const codePoint = toCodePoint(emoji);\n  return `/_next/image?url=${toBaseUrl(codePoint, options)}&${formatParams(nextOptions.params)}`;\n}\n\n/**\n * Convert options to `src` url.\n */\nfunction toUrl(emoji: string, options: Options) {\n  switch (options.framework.type) {\n    case 'next':\n      return toNextUrl(emoji, options.framework, options.twemoji);\n\n    default:\n      // your framework isn't supported yet...\n      return toBaseUrl(toCodePoint(emoji), options.twemoji);\n  }\n}\n\nfunction makeTransformer(options: Options): Transformer<Root, Root> {\n  return (tree: Root) => {\n    const mappedChildren = tree.children.map(\n      (child) =>\n        map(child, (node: RootContent) => {\n          if (node.type !== 'text' || !regex.test(node.value)) {\n            return node;\n          }\n\n          const children = replaceToArray(node.value, regex, (text) => ({\n            emoji: text\n          })).map<ElementContent>((segment) =>\n            typeof segment === 'string'\n              ? {\n                  type: 'text',\n                  value: segment\n                }\n              : options.exclude.includes(segment.emoji)\n              ? {\n                  type: 'text',\n                  value: segment.emoji\n                }\n              : {\n                  type: 'element',\n                  tagName: 'img',\n                  properties: {\n                    className: [options.className],\n                    draggable: 'false',\n                    alt: segment.emoji,\n                    decoding: 'async',\n                    src: toUrl(segment.emoji, options)\n                  },\n                  children: []\n                }\n          );\n\n          const result: Content = {\n            type: 'element',\n            tagName: 'span',\n            children\n          };\n\n          return result;\n        }) as RootContent\n    );\n\n    return {\n      ...tree,\n      children: mappedChildren\n    };\n  };\n}\n\n/**\n * Plugin to twemoji-fy ordinary emojis in HTML.\n */\nconst rehypeTwemojify: Plugin<[UserOptions?], Root, Root> = function (userOptions) {\n  const options = resolveOptions(userOptions);\n  return makeTransformer(options);\n};\n\nexport default rehypeTwemojify;\n","import { DeepRequired } from 'ts-essentials';\n\nexport type FrameworkNextUserOptions = {\n  type: 'next';\n  params?: { [key: string]: any };\n};\n\nexport type FrameworkOptions = FrameworkNextUserOptions | { type: 'none' };\nexport type TwemojiUserOptions = {\n  baseUrl?: string;\n  size?: '72x72' | 'svg';\n};\n\nexport type UserOptions = {\n  exclude?: Array<string>;\n  className?: string;\n  framework?: FrameworkOptions;\n  twemoji?: TwemojiUserOptions;\n};\n\nexport type Options = DeepRequired<UserOptions>;\nexport type TwemojiOptions = DeepRequired<TwemojiUserOptions>;\nexport type FrameworkNextOptions = DeepRequired<FrameworkNextUserOptions>;\n\nconst defaultFrameworkNextOptions: DeepRequired<FrameworkNextUserOptions> = {\n  type: 'next',\n  params: {\n    w: 64,\n    q: 30\n  }\n};\n\nconst defaultTwemojiOptions: DeepRequired<TwemojiUserOptions> = {\n  baseUrl: 'https://twemoji.maxcdn.com/v/latest',\n  size: '72x72'\n};\n\nconst defaultOptions: Options = {\n  exclude: [],\n  className: 'emoji',\n  framework: { type: 'none' },\n  twemoji: defaultTwemojiOptions\n};\n\nfunction resolveFrameworkOptions(userOptions: FrameworkOptions): DeepRequired<FrameworkOptions> {\n  switch (userOptions.type) {\n    case 'next':\n      return {\n        ...defaultFrameworkNextOptions,\n        params: {\n          ...defaultFrameworkNextOptions.params,\n          ...userOptions.params\n        }\n      };\n    case 'none':\n      return {\n        type: 'none'\n      };\n    default:\n      throw new Error('Unknown framework');\n  }\n}\n\nexport function resolveOptions(userOptions: UserOptions | void): Options {\n  return userOptions\n    ? {\n        exclude: userOptions.exclude ?? defaultOptions.exclude,\n        className: userOptions.className ?? defaultOptions.className,\n        framework: userOptions.framework\n          ? resolveFrameworkOptions(userOptions.framework)\n          : defaultOptions.framework,\n        twemoji: {\n          ...defaultOptions.twemoji,\n          ...userOptions.twemoji\n        }\n      }\n    : defaultOptions;\n}\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}