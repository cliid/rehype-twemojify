{"mappings":"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","sources":["src/index.ts","src/config.ts"],"sourcesContent":["import twemoji from '@twemoji/api';\nimport emojiRegex from 'emoji-regex';\nimport type { ElementContent, Root, RootContent } from 'hast';\nimport replaceToArray from 'string-replace-to-array';\nimport type { Plugin, Transformer } from 'unified';\nimport { map } from 'unist-util-map';\nimport {\n  FrameworkNextOptions,\n  Options,\n  resolveOptions,\n  TwemojiOptions,\n  UserOptions\n} from './config';\n\nconst regex = emojiRegex();\n\nfunction sizeToExtension(size: TwemojiOptions['size']): string {\n  switch (size) {\n    case '72x72':\n      return '.png';\n    case 'svg':\n      return '.svg';\n    default:\n      throw new Error('Unknown size');\n  }\n}\n\n/**\n * @summary Turn parameters object in a URL search params string.\n */\nfunction formatParams(params: FrameworkNextOptions['params']): string {\n  const urlParams = new URLSearchParams();\n  Object.entries(params).forEach(([key, value]) => urlParams.append(key, value.toString()));\n  return urlParams.toString();\n}\n\nconst UFE0Fg = /\\uFE0F/g;\nconst U200D = String.fromCharCode(0x200d);\n\n/**\n * Convert a raw emoji into the relevant Twemoji code point.\n * @param emoji A string containing a single emoji.\n * @returns The code point at which the corresponding emoji can be found in Twemoji.\n * @example The input `'üë®‚Äçüåæ'` would be converted to `'1f468-200d-1f33e'`\n */\nfunction toCodePoint(emoji: string): string {\n  return twemoji.convert.toCodePoint(emoji.indexOf(U200D) < 0 ? emoji.replace(UFE0Fg, '') : emoji);\n}\n\nfunction toBaseUrl(codePoint: string, options: TwemojiOptions): string {\n  return `${options.baseUrl}/${options.size}/${codePoint}${sizeToExtension(options.size)}`;\n}\n\nfunction toNextUrl(\n  emoji: string,\n  nextOptions: FrameworkNextOptions,\n  options: TwemojiOptions\n): string {\n  const codePoint = toCodePoint(emoji);\n  return `/_next/image?url=${toBaseUrl(codePoint, options)}&${formatParams(nextOptions.params)}`;\n}\n\n/**\n * Convert options to `src` url.\n */\nfunction toUrl(emoji: string, options: Options) {\n  switch (options.framework.type) {\n    case 'next':\n      return toNextUrl(emoji, options.framework, options.twemoji);\n\n    default:\n      // your framework isn't supported yet...\n      return toBaseUrl(toCodePoint(emoji), options.twemoji);\n  }\n}\n\nfunction makeTransformer(options: Options): Transformer<Root, Root> {\n  return (tree: Root) => {\n    const mappedChildren = tree.children.map(\n      (child) =>\n        map(child, (node: RootContent) => {\n          if (node.type !== 'text' || !regex.test(node.value)) {\n            return node;\n          }\n\n          const children = replaceToArray(node.value, regex, (text) => ({\n            emoji: text\n          })).map<ElementContent>((segment) => {\n            if (typeof segment === 'string') {\n              return {\n                type: 'text',\n                value: segment\n              };\n            }\n            if (options.exclude.includes(segment.emoji)) {\n              return {\n                type: 'text',\n                value: segment.emoji\n              };\n            }\n            return {\n              type: 'element',\n              tagName: 'img',\n              properties: {\n                className: [options.className],\n                draggable: 'false',\n                alt: segment.emoji,\n                decoding: 'async',\n                src: toUrl(segment.emoji, options)\n              },\n              children: []\n            };\n          });\n\n          const result: RootContent = {\n            type: 'element',\n            tagName: 'span',\n            properties: {},\n            children\n          };\n\n          return result;\n        }) as RootContent\n    );\n\n    return {\n      ...tree,\n      children: mappedChildren\n    };\n  };\n}\n\n/**\n * Plugin to twemoji-fy ordinary emojis in HTML.\n */\nconst rehypeTwemojify: Plugin<[UserOptions?], Root, Root> = (userOptions) => {\n  const options = resolveOptions(userOptions);\n  return makeTransformer(options);\n};\n\nexport default rehypeTwemojify;\n","import { DeepRequired } from 'ts-essentials';\n\nexport type FrameworkNextUserOptions = {\n  type: 'next';\n  params?: { [key: string]: unknown };\n};\n\nexport type FrameworkOptions = FrameworkNextUserOptions | { type: 'none' };\nexport type TwemojiUserOptions = {\n  baseUrl?: string;\n  size?: '72x72' | 'svg';\n};\n\nexport type UserOptions = {\n  exclude?: Array<string>;\n  className?: string;\n  framework?: FrameworkOptions;\n  twemoji?: TwemojiUserOptions;\n};\n\nexport type Options = DeepRequired<UserOptions>;\nexport type TwemojiOptions = DeepRequired<TwemojiUserOptions>;\nexport type FrameworkNextOptions = DeepRequired<FrameworkNextUserOptions>;\n\nconst defaultFrameworkNextOptions: DeepRequired<FrameworkNextUserOptions> = {\n  type: 'next',\n  params: {\n    w: 64,\n    q: 30\n  }\n};\n\nconst defaultTwemojiOptions: DeepRequired<TwemojiUserOptions> = {\n  baseUrl: 'https://cdn.jsdelivr.net/gh/jdecked/twemoji@latest/assets',\n  size: '72x72'\n};\n\nconst defaultOptions: Options = {\n  exclude: [],\n  className: 'emoji',\n  framework: { type: 'none' },\n  twemoji: defaultTwemojiOptions\n};\n\nfunction resolveFrameworkOptions(userOptions: FrameworkOptions): DeepRequired<FrameworkOptions> {\n  switch (userOptions.type) {\n    case 'next':\n      return {\n        ...defaultFrameworkNextOptions,\n        params: {\n          ...defaultFrameworkNextOptions.params,\n          ...userOptions.params\n        }\n      };\n    case 'none':\n      return {\n        type: 'none'\n      };\n    default:\n      throw new Error('Unknown framework');\n  }\n}\n\nexport function resolveOptions(userOptions: UserOptions | void): Options {\n  return userOptions\n    ? {\n        exclude: userOptions.exclude ?? defaultOptions.exclude,\n        className: userOptions.className ?? defaultOptions.className,\n        framework: userOptions.framework\n          ? resolveFrameworkOptions(userOptions.framework)\n          : defaultOptions.framework,\n        twemoji: {\n          ...defaultOptions.twemoji,\n          ...userOptions.twemoji\n        }\n      }\n    : defaultOptions;\n}\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}