{"mappings":";;AAEA,gCAAuC;IACrC,IAAI,EAAE,MAAM,CAAC;IACb,MAAM,CAAC,EAAE;QAAE,CAAC,GAAG,EAAE,MAAM,GAAG,OAAO,CAAA;KAAE,CAAC;CACrC,CAAC;AAEF,wBAA+B,wBAAwB,GAAG;IAAE,IAAI,EAAE,MAAM,CAAA;CAAE,CAAC;AAC3E,0BAAiC;IAC/B,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,IAAI,CAAC,EAAE,OAAO,GAAG,KAAK,CAAC;CACxB,CAAC;AAEF,mBAA0B;IACxB,OAAO,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;IACxB,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,SAAS,CAAC,EAAE,gBAAgB,CAAC;IAC7B,OAAO,CAAC,EAAE,kBAAkB,CAAC;CAC9B,CAAC;ACkHF;;GAEG;AACH,QAAA,MAAM,eAAe,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAGvD,CAAC;AAEF,eAAe,eAAe,CAAC","sources":["src/src/config.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,"import twemoji from '@twemoji/api';\nimport emojiRegex from 'emoji-regex';\nimport type { ElementContent, Root, RootContent } from 'hast';\nimport replaceToArray from 'string-replace-to-array';\nimport type { Plugin, Transformer } from 'unified';\nimport { map } from 'unist-util-map';\nimport {\n  FrameworkNextOptions,\n  Options,\n  resolveOptions,\n  TwemojiOptions,\n  UserOptions\n} from './config';\n\nconst regex = emojiRegex();\n\nfunction sizeToExtension(size: TwemojiOptions['size']): string {\n  switch (size) {\n    case '72x72':\n      return '.png';\n    case 'svg':\n      return '.svg';\n    default:\n      throw new Error('Unknown size');\n  }\n}\n\n/**\n * @summary Turn parameters object in a URL search params string.\n */\nfunction formatParams(params: FrameworkNextOptions['params']): string {\n  const urlParams = new URLSearchParams();\n  Object.entries(params).forEach(([key, value]) => urlParams.append(key, value.toString()));\n  return urlParams.toString();\n}\n\nconst UFE0Fg = /\\uFE0F/g;\nconst U200D = String.fromCharCode(0x200d);\n\n/**\n * Convert a raw emoji into the relevant Twemoji code point.\n * @param emoji A string containing a single emoji.\n * @returns The code point at which the corresponding emoji can be found in Twemoji.\n * @example The input `'üë®‚Äçüåæ'` would be converted to `'1f468-200d-1f33e'`\n */\nfunction toCodePoint(emoji: string): string {\n  return twemoji.convert.toCodePoint(emoji.indexOf(U200D) < 0 ? emoji.replace(UFE0Fg, '') : emoji);\n}\n\nfunction toBaseUrl(codePoint: string, options: TwemojiOptions): string {\n  return `${options.baseUrl}/${options.size}/${codePoint}${sizeToExtension(options.size)}`;\n}\n\nfunction toNextUrl(\n  emoji: string,\n  nextOptions: FrameworkNextOptions,\n  options: TwemojiOptions\n): string {\n  const codePoint = toCodePoint(emoji);\n  return `/_next/image?url=${toBaseUrl(codePoint, options)}&${formatParams(nextOptions.params)}`;\n}\n\n/**\n * Convert options to `src` url.\n */\nfunction toUrl(emoji: string, options: Options) {\n  switch (options.framework.type) {\n    case 'next':\n      return toNextUrl(emoji, options.framework, options.twemoji);\n\n    default:\n      // your framework isn't supported yet...\n      return toBaseUrl(toCodePoint(emoji), options.twemoji);\n  }\n}\n\nfunction makeTransformer(options: Options): Transformer<Root, Root> {\n  return (tree: Root) => {\n    const mappedChildren = tree.children.map(\n      (child) =>\n        map(child, (node: RootContent) => {\n          if (node.type !== 'text' || !regex.test(node.value)) {\n            return node;\n          }\n\n          const children = replaceToArray(node.value, regex, (text) => ({\n            emoji: text\n          })).map<ElementContent>((segment) => {\n            if (typeof segment === 'string') {\n              return {\n                type: 'text',\n                value: segment\n              };\n            }\n            if (options.exclude.includes(segment.emoji)) {\n              return {\n                type: 'text',\n                value: segment.emoji\n              };\n            }\n            return {\n              type: 'element',\n              tagName: 'img',\n              properties: {\n                className: [options.className],\n                draggable: 'false',\n                alt: segment.emoji,\n                decoding: 'async',\n                src: toUrl(segment.emoji, options)\n              },\n              children: []\n            };\n          });\n\n          const result: RootContent = {\n            type: 'element',\n            tagName: 'span',\n            properties: {},\n            children\n          };\n\n          return result;\n        }) as RootContent\n    );\n\n    return {\n      ...tree,\n      children: mappedChildren\n    };\n  };\n}\n\n/**\n * Plugin to twemoji-fy ordinary emojis in HTML.\n */\nconst rehypeTwemojify: Plugin<[UserOptions?], Root, Root> = (userOptions) => {\n  const options = resolveOptions(userOptions);\n  return makeTransformer(options);\n};\n\nexport default rehypeTwemojify;\n"],"names":[],"version":3,"file":"index.d.ts.map","sourceRoot":"../"}